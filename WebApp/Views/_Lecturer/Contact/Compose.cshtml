@model WebApp.ViewModels.Contact.ComposeViewModel
@using WebApp.Models
<link rel="stylesheet" href="~/css/compose.min.css" />
<script src="~/js/compose.min.js")"></script>
<script src="~/js/tinymce/tinymce.min.js"></script>
<style>
    .frm-title-info {
        font-size: 1.5rem;
        float: left;
        width: 100%;
    }

        .frm-title-info > label {
            float: left;
            text-align: left;
            width: 80px;
            margin: 0 8px;
        }

    #subject-heading {
        outline: none;
        border: none !important;
        border-bottom: 1px solid #ccc;
        width: 65%;
    }

      input[type="text"]:focus,  input[type="text"]:active {
        -webkit-appearance: none !important;
        outline: none !important;
    }

    #content-body {
        display: inline-flex;
        border: none;
        height: 400px;
        width: 1050px;
        padding: 0 10px;
        margin-left: -4px;
    }


    #tag-list {
        width: 100%;
        outline: none;
        border: none;
        display: inline;
    }

    #scrollArea {
        width: 343px;
        height: 400px;
        max-height: 400px;
        overflow: auto;
        border: 1px solid #ccc;
        margin: 0 0 180px 0;
        padding: 0;
    }

    #contact-table {
        width: 100%;
    }

        #contact-table > tbody > tr {
            border: 1px solid #ccc;
            height: 20px !important;
        }

            #contact-table > tbody > tr > td {
                padding: 5px;
            }

    #searchfield {
        background: #eeefed;
        padding: 0;
        margin: 0;
        padding: 5px;
        border-radius: 3px;
        margin: 5px 0 0 0;
    }

    #table-search {
        height: 30px;
        padding: 0 10px 0 10px;
        background-color: #fff;
        border: 1px solid #c8c8c8;
        border-radius: 3px;
        color: #aeaeae;
        font-weight: normal;
        font-size: 1em;
        -webkit-transition: all 0.2s linear;
        -moz-transition: all 0.2s linear;
        transition: all 0.2s linear;
        width: 100%;
    }

        #table-search:focus {
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(0, 0, 0, 0.3);
            outline: none;
        }

    .menu-btns {
        border: 1px solid #cccccc;
    }

        .menu-btns:hover {
            border: 0.5px solid #666666;
            color: rgba(0,0,0, .5);
        }

    #type-recipient {
        margin-bottom: 15px;
    }

    @@media (max-width: 1048px) {
        #scrollArea {
            display: none;
        }

        #send-method-option {
            margin-top: 8px;
            width: 80px;
        }


        label {
            font-size: initial;
            margin-top: 14px;
        }

        #content-body {
            width: 100%;
        }

        #page-content-wrapper {
            padding: 10px 0 !important;
        }

        .col-lg-12 {
            padding-left: 0;
        }

        ul.token-input-list-facebook {
            width: inherit;
        }

        #form-compose-message label {
            margin: 0;
        }


        #custom-menubar {
            height: auto;
        }

        footer {
            display: none;
        }
    }

    #form-compose-message {
        margin-top: 5px;
    }

    .send-method-ctrl {
        width: initial;
        position: relative;
    }

    ::selection {
        background: transparent;
    }

    ::-moz-selection {
        background: transparent;
    }

    .input-state-error {
        position: relative;
        color: #c85305;
        font-size: 95%;
        margin: 0 0 0px 8px;
        display: none;
    }
</style>

<div class="fbox-container boxed push-down-45" style="width: auto; height: initial !important;">
    <div id="scrollArea">
        <div id="searchfield">
            <input class="clearable" type="text" name="table-search" id="table-search" />
        </div>
        <table id="contact-table">

            @await Html.PartialAsync("~/Views/_Lecturer/Contact/_ContactItem.cshtml", Model)
        </table>
    </div>

    @await Html.PartialAsync("~/Views/_Lecturer/Contact/_Message.cshtml")
</div>
<script>
    function setUpRte() {
        tinymce.init({
            menu: {
                tools: { title: 'Tools', items: 'spellchecker code' }
            },

            content_css: '@Url.Content("~/Content/rte.css")',
            resize: false,
            height: 270,
            mode: 'textareas',
            elements: 'rte'
        });
    }

    function CountCharacters() {
        var body = tinymce.get("rte").getBody();
        var content = tinymce.trim(body.innerText || body.textContent);
        return content.length;
    };

    function isValidEmailAddress(emailAddress) {
        var pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
        return pattern.test(emailAddress);
    };

    $(function () {
        if ($(window).width() < '640') {
            tinymce.init({
                content_css: '@Url.Content("~/Content/rte.css")',
                menubar: false,
                statusbar: false,
                toolbar: false
            });
            tinymce.EditorManager.execCommand('mceAddEditor', true, 'rte');
        } else {
            setUpRte();
        }

        $('#contact-table').on('click', 'tr', function (e) {
            e.preventDefault();
            var name = $(this).closest('tr').find('td > span').html();
            var id = $(this).closest('tr').find('td > input').val();
            $('#tag-list').tokenInput("add", { id: id, name: name });

            if (id == '-1000') {
                $('#contact-table').html('');
            }
            $(this).closest('tr').remove();

        });

        $('.clearable').clearSearch();

        $("#contact-table").searcher({
            inputSelector: "#table-search"
        });

        var rows = new Array();
        $.post("/Contact/GetAllStudentsFullName", {}, function (result) {
            $("#tag-list").tokenInput(result, {
                allowFreeTagging: true,
                onFreeTaggingAdd: function (item) {
                    if (isValidEmailAddress(item)) {
                        return item;
                    } else {
                        $('#tag-list').tokenInput("remove", new object);
                    }
                },
                preventDuplicates: true,
                onAdd: function(item){
                    switch (item.id) {
                        case '-1000':            
                            var items = $('#tag-list').tokenInput('get');
                                $.each(items, function (index, tag) {
                                    if (tag.id != tag.name && tag.id != '-1000') {
                                        $('#tag-list').tokenInput("remove", { id: tag.id });
                                    }
                                });
                                break;
                    }
                },
                onDelete: function (item) {
                    if (item.id > 0) {
                        $('#contact-table').append('<tr><td><span class="full-name">' + item.name + '</span>' +
                                    '<input type="hidden" value="' + item.id + '" /></td></tr>');
                        return;
                    }

                    switch (item.id) {
                        case '-1000':
                            $.ajax({
                                cache: false,
                                type: "GET",
                                url: '@Url.Action("GetStudentContacts", "Contact")',
                                dataType: "html",
                                success: function (result) {
                                    var partial = $.parseHTML(result);
                                    $("#contact-table").append("<tbody></tbody>");
                                    $(partial).appendTo($("#contact-table").find("tbody"));
                                },
                                error: function (req, status, error) {
                                    alert(error);
                                }
                            });
                    }

                }
            });
        }, "json");
    });

    function getSubmitOptions() {
        var haserrors = 0;
        var messageText = tinyMCE.activeEditor.getContent({ format: 'text' });

        if ($('#tag-list').tokenInput('get') == "") {
            haserrors++;
            displayRequiredError('recipient-error-message');

        }

        if ($('#subject-heading').val() == "") {
            haserrors++;
            displayRequiredError('subject-error-message');

        }
        if ($.trim(messageText) == "") {
            displayRequiredError('editor-error-message');
            haserrors++;
        } else {
            if (messageText == $('#rte').attr('placeholder')) {
                displayRequiredError('editor-error-message');
                haserrors++;
            }
        }

        if (haserrors > 0) {
            $('.input-state-error').css('display', 'block');
            return false;
        }

        return true;
    }

    function alterForText() {
        var selected = $('select#send-method-option').val();
        if (selected == '2') {
            placeholderExist();
            var messageText = tinyMCE.activeEditor.getContent({ format: 'text' });
            $('#messageText').val(messageText);
        }
    }
    function displayRequiredError(error) {
        var message = "";
        switch (error) {
            case "editor-error-message":
                message = "Text message required";
                break;
            case "subject-error-message":
                message = "Don't forget the subject!";
                break;
            case "recipient-error-message":
                message = "We need at least one recipient";
                break;
        }
        $('#' + error).html(message).show();

        setTimeout(function () {
            $('#' + error).fadeOut().html('');
        }, '4000');
    }
    function placeholderExist() {
        if (tinyMCE.get('rte').getContent({ format: 'text' }) == $('#rte').attr('placeholder')) {
            tinyMCE.get('rte').setContent('');
        }
    }
    $('select#send-method-option').change(function (e) {
        //Send method is email
        if ($(this).val() == '1') {
            placeholderExist();
            tinymce.EditorManager.execCommand('mceRemoveEditor', true, 'rte');
            setUpRte();
            tinymce.EditorManager.execCommand('mceAddEditor', true, 'rte');
            $('#type-subject').show();
        }

        //Send method is sms
        if ($(this).val() == '2') {
            tinymce.EditorManager.execCommand('mceRemoveEditor', true, 'rte');
            $('#rte').attr('placeholder', 'Enter a message...');
            tinymce.init({
                mode: 'textareas',
                content_css: '@Url.Content("~/Content/rte.css")',
                menubar: false,
                statusbar: false,
                toolbar: false,
                width: 300,
                height: 300,
                setup: function (editor) {                 
                    //Configure the placeholder
                    var placeholder = $('#' + editor.id).attr('placeholder');
                    if (typeof placeholder !== 'undefined' && placeholder !== false) {
                        var is_default = false;
                        editor.on('init', function () {
                            // get the current content
                            var cont = editor.getContent();

                            // If its empty and we have a placeholder set the value
                            if (cont.length === 0) {
                                editor.setContent(placeholder);
                                // Get updated content
                                cont = placeholder;
                            }
                            // convert to plain text and compare strings
                            is_default = (cont == placeholder);

                            // nothing to do
                            if (!is_default) {
                                return;
                            }
                        })
                        .on('focus', function () {
                            // replace the default content on focus if the same as original placeholder
                            if (editor.getContent({ 'format': 'text' }) == placeholder) {
                                editor.setContent('');
                            }
                        })
                        .on('blur', function () {
                            if (editor.getContent().length === 0) {
                                editor.setContent(placeholder);
                            }
                        });

                        editor.on('keyup', function (e) {
                            var count = CountCharacters();
                            document.getElementById("character_count").innerHTML = "Characters: <span>" + count + "</span>";
                        });
                    }
                },
                cleanup: true
            });
            tinymce.EditorManager.execCommand('mceAddEditor', true, 'rte');
            $('#type-subject').hide();
        }
    });

    function cleanup(text) {
        var re = /<\b[^>]*>|[</\b][^>]*>/g;
        return text.replace(re, "");
    }

    function resetComposeForm() {
        $("#form-compose-message input[type=text]").each(function () {
            $(this).closest('input[type=text]').val('');
        });

        tinyMCE.get('rte').setContent('');
    }

    function confirmationBeforeSubmit() {
        if ($('select#send-method-option').val() == '1') {
            submitComposeForm();
        }
        if ($('select#send-method-option').val() == '2') {
            var closable = alertify.dialog('confirm').setting('closable');
            alertify.dialog('confirm')
               .set({
                   'title': 'Confirm to send',
                   'message': 'You are about to send ' + getMessagesEstimated() + ' message(s). Costs may apply. To find out more about charges, visit <a href="http://support.burstsms.com/hc/en-us/articles/202402268-How-many-characters-can-I-have-in-my-text-message-" target="_blank" style="text-decoration: none;">more about costs</a>',
                   'onok': function () { submitComposeForm(); }
               }).show();

            var savedInput = tinyMCE.get('rte').getContent();
        }
    }

    function submitComposeForm() {
        if (getSubmitOptions()) { $('#form-compose-message').submit();}
    }

    function getMessagesEstimated() {
        var noOfRecipients = $('#tag-list').tokenInput("get").length;
        var ct = $("#character_count").find('span').text(); var SMScount = 0;
        switch (true) {
            case (ct <= 160): SMScount = 1;
                break;
            case (ct <= 306): SMScount = 2;
                break;
            case (ct <= 459): SMScount = 3;
                break;
            case (ct <= 612): SMScount = 4; //max
                break;
        }
        return SMScount * noOfRecipients;
    }
</script>
